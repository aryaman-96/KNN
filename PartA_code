import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.manifold import TSNE

# Load the training data
df = pd.read_csv('C:/Users/aaron/Downloads/datasets_with_headers/indexed-TrainingDataBinary.csv')
print('Shape of data:', df.shape)
df.head(3)

# Class balance
sns.countplot(df['marker'])
plt.title('Number of Data Points for each class')
plt.show()
print(df['marker'].value_counts())

X = df.drop('marker', axis=1)
y = df['marker']

# Create a function to visualize TSNE results
def tsne_visualizer(data, label, title):
    tsne_model = TSNE(n_components=2, n_iter=2000)
    tsne_data = tsne_model.fit_transform(data)

    tsne_df = pd.DataFrame(data=np.vstack((tsne_data.T, label)).T, columns=['1st_component', '2nd_component', 'label'])
    tsne_df

    sns.scatterplot(data=tsne_df, x='1st_component', y='2nd_component', hue='label')
    plt.title(title)
    plt.show()

# Visualize data with TSNE
title = 'Visualization of our data space in 2D'
tsne_visualizer(data=X, label=y, title=title)

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create the KNN classifier
knn_model = KNeighborsClassifier(n_neighbors=3)

# Perform cross-validation
cv_scores = cross_val_score(knn_model, X_train, y_train, cv=5)

# Print the cross-validation scores
print("Cross-validation Scores:", cv_scores)
print("Average Cross-validation Score:", np.mean(cv_scores))

# Fit the KNN model on the training data
knn_model.fit(X_train, y_train)

# Predict on the test data
pred = knn_model.predict(X_test)

# Print the accuracy score, classification report, and confusion matrix
print('Accuracy of Model:', accuracy_score(y_test, pred))
print('\n\nClassification Report:')
print(classification_report(y_test, pred))
print('\n\nConfusion Matrix:')
print(confusion_matrix(y_test, pred))

# Load the test data
df_test = pd.read_csv('C:/Users/aaron/Downloads/datasets_with_headers/indexed-TestingDataBinary.csv')
df_test.head(2)

# Standardize the test data
test_data_std = scaler.transform(df_test)
print(test_data_std.shape)

# Predict labels for the test data
test_data_predictions = knn_model.predict(test_data_std)
test_data_predictions = pd.DataFrame(test_data_predictions, columns=['Predictions'])
test_data_predictions

# Save the predicted labels to a CSV file
test_data_predictions.to_csv('C:/Users/aaron/Downloads/predict1.csv', index=False)

